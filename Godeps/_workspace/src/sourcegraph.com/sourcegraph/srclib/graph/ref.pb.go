// Code generated by protoc-gen-gogo.
// source: ref.proto
// DO NOT EDIT!

package graph

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// Ref represents a reference from source code to a Def.
type Ref struct {
	// DefRepo is the repository URI of the Def that this Ref refers
	// to.
	DefRepo string `protobuf:"bytes,1,opt,name=def_repo" json:"DefRepo,omitempty"`
	// DefUnitType is the source unit type of the Def that this Ref refers to.
	DefUnitType string `protobuf:"bytes,3,opt,name=def_unit_type" json:"DefUnitType,omitempty"`
	// DefUnit is the name of the source unit that this ref exists in.
	DefUnit string `protobuf:"bytes,4,opt,name=def_unit" json:"DefUnit,omitempty"`
	// Path is the path of the Def that this ref refers to.
	DefPath string `protobuf:"bytes,5,opt,name=def_path" json:"DefPath"`
	// Repo is the VCS repository in which this ref exists.
	Repo string `protobuf:"bytes,6,opt,name=repo" json:"Repo,omitempty"`
	// CommitID is the ID of the VCS commit that this ref exists
	// in. The CommitID is always a full commit ID (40 hexadecimal
	// characters for git and hg), never a branch or tag name.
	CommitID string `protobuf:"bytes,7,opt,name=commit_id" json:"CommitID,omitempty"`
	// UnitType is the type name of the source unit that this ref
	// exists in.
	UnitType string `protobuf:"bytes,8,opt,name=unit_type" json:"UnitType,omitempty"`
	// Unit is the name of the source unit that this ref exists in.
	Unit string `protobuf:"bytes,9,opt,name=unit" json:"Unit,omitempty"`
	// Def is true if this Ref spans the name of the Def it points to.
	Def bool `protobuf:"varint,17,opt,name=def" json:"Def,omitempty"`
	// File is the filename in which this Ref exists.
	File string `protobuf:"bytes,10,opt,name=file" json:"File,omitempty"`
	// Start is the byte offset of this ref's first byte in File.
	Start uint32 `protobuf:"varint,11,opt,name=start" json:"Start"`
	// End is the byte offset of this ref's last byte in File.
	End uint32 `protobuf:"varint,12,opt,name=end" json:"End"`
}

func (m *Ref) Reset()         { *m = Ref{} }
func (m *Ref) String() string { return proto.CompactTextString(m) }
func (*Ref) ProtoMessage()    {}

type RefDefKey struct {
	DefRepo     string `protobuf:"bytes,1,opt,name=def_repo" json:"DefRepo,omitempty"`
	DefUnitType string `protobuf:"bytes,3,opt,name=def_unit_type" json:"DefUnitType,omitempty"`
	DefUnit     string `protobuf:"bytes,4,opt,name=def_unit" json:"DefUnit,omitempty"`
	DefPath     string `protobuf:"bytes,5,opt,name=def_path" json:"DefPath"`
}

func (m *RefDefKey) Reset()         { *m = RefDefKey{} }
func (m *RefDefKey) String() string { return proto.CompactTextString(m) }
func (*RefDefKey) ProtoMessage()    {}

func init() {
}
func (m *Ref) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefRepo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefRepo = string(data[index:postIndex])
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefUnitType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefUnitType = string(data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefUnit = string(data[index:postIndex])
			index = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefPath = string(data[index:postIndex])
			index = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(data[index:postIndex])
			index = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitID = string(data[index:postIndex])
			index = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitType = string(data[index:postIndex])
			index = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(data[index:postIndex])
			index = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Def", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Def = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(data[index:postIndex])
			index = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Start |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.End |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			index += skippy
		}
	}
	return nil
}
func (m *RefDefKey) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefRepo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefRepo = string(data[index:postIndex])
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefUnitType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefUnitType = string(data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefUnit = string(data[index:postIndex])
			index = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefPath = string(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			index += skippy
		}
	}
	return nil
}
func (m *Ref) Size() (n int) {
	var l int
	_ = l
	l = len(m.DefRepo)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.DefUnitType)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.DefUnit)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.DefPath)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.Repo)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.CommitID)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.UnitType)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.Unit)
	n += 1 + l + sovRef(uint64(l))
	n += 3
	l = len(m.File)
	n += 1 + l + sovRef(uint64(l))
	n += 1 + sovRef(uint64(m.Start))
	n += 1 + sovRef(uint64(m.End))
	return n
}

func (m *RefDefKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.DefRepo)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.DefUnitType)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.DefUnit)
	n += 1 + l + sovRef(uint64(l))
	l = len(m.DefPath)
	n += 1 + l + sovRef(uint64(l))
	return n
}

func sovRef(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRef(x uint64) (n int) {
	return sovRef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ref) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Ref) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefRepo)))
	i += copy(data[i:], m.DefRepo)
	data[i] = 0x1a
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefUnitType)))
	i += copy(data[i:], m.DefUnitType)
	data[i] = 0x22
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefUnit)))
	i += copy(data[i:], m.DefUnit)
	data[i] = 0x2a
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefPath)))
	i += copy(data[i:], m.DefPath)
	data[i] = 0x32
	i++
	i = encodeVarintRef(data, i, uint64(len(m.Repo)))
	i += copy(data[i:], m.Repo)
	data[i] = 0x3a
	i++
	i = encodeVarintRef(data, i, uint64(len(m.CommitID)))
	i += copy(data[i:], m.CommitID)
	data[i] = 0x42
	i++
	i = encodeVarintRef(data, i, uint64(len(m.UnitType)))
	i += copy(data[i:], m.UnitType)
	data[i] = 0x4a
	i++
	i = encodeVarintRef(data, i, uint64(len(m.Unit)))
	i += copy(data[i:], m.Unit)
	data[i] = 0x88
	i++
	data[i] = 0x1
	i++
	if m.Def {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	data[i] = 0x52
	i++
	i = encodeVarintRef(data, i, uint64(len(m.File)))
	i += copy(data[i:], m.File)
	data[i] = 0x58
	i++
	i = encodeVarintRef(data, i, uint64(m.Start))
	data[i] = 0x60
	i++
	i = encodeVarintRef(data, i, uint64(m.End))
	return i, nil
}

func (m *RefDefKey) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RefDefKey) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefRepo)))
	i += copy(data[i:], m.DefRepo)
	data[i] = 0x1a
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefUnitType)))
	i += copy(data[i:], m.DefUnitType)
	data[i] = 0x22
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefUnit)))
	i += copy(data[i:], m.DefUnit)
	data[i] = 0x2a
	i++
	i = encodeVarintRef(data, i, uint64(len(m.DefPath)))
	i += copy(data[i:], m.DefPath)
	return i, nil
}

func encodeFixed64Ref(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ref(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRef(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *Ref) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&graph.Ref{` +
		`DefRepo:` + fmt.Sprintf("%#v", this.DefRepo),
		`DefUnitType:` + fmt.Sprintf("%#v", this.DefUnitType),
		`DefUnit:` + fmt.Sprintf("%#v", this.DefUnit),
		`DefPath:` + fmt.Sprintf("%#v", this.DefPath),
		`Repo:` + fmt.Sprintf("%#v", this.Repo),
		`CommitID:` + fmt.Sprintf("%#v", this.CommitID),
		`UnitType:` + fmt.Sprintf("%#v", this.UnitType),
		`Unit:` + fmt.Sprintf("%#v", this.Unit),
		`Def:` + fmt.Sprintf("%#v", this.Def),
		`File:` + fmt.Sprintf("%#v", this.File),
		`Start:` + fmt.Sprintf("%#v", this.Start),
		`End:` + fmt.Sprintf("%#v", this.End) + `}`}, ", ")
	return s
}
func (this *RefDefKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&graph.RefDefKey{` +
		`DefRepo:` + fmt.Sprintf("%#v", this.DefRepo),
		`DefUnitType:` + fmt.Sprintf("%#v", this.DefUnitType),
		`DefUnit:` + fmt.Sprintf("%#v", this.DefUnit),
		`DefPath:` + fmt.Sprintf("%#v", this.DefPath) + `}`}, ", ")
	return s
}
func valueToGoStringRef(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringRef(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
