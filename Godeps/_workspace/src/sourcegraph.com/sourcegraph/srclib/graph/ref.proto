package graph;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.gostring_all) = true;

// Ref represents a reference from source code to a Def.
message Ref {
    // DefRepo is the repository URI of the Def that this Ref refers
    // to.
    optional string def_repo = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefRepo", (gogoproto.jsontag) = "DefRepo,omitempty"];

    // DefUnitType is the source unit type of the Def that this Ref refers to.
    optional string def_unit_type = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefUnitType", (gogoproto.jsontag) = "DefUnitType,omitempty"];

    // DefUnit is the name of the source unit that this ref exists in.
    optional string def_unit = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefUnit", (gogoproto.jsontag) = "DefUnit,omitempty"];
    
    // Path is the path of the Def that this ref refers to.
    optional string def_path = 5 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefPath", (gogoproto.jsontag) = "DefPath"];


    // Repo is the VCS repository in which this ref exists.
    optional string repo = 6 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "Repo,omitempty"];

    // CommitID is the ID of the VCS commit that this ref exists
    // in. The CommitID is always a full commit ID (40 hexadecimal
    // characters for git and hg), never a branch or tag name.
    optional string commit_id = 7 [(gogoproto.nullable) = false, (gogoproto.customname) = "CommitID", (gogoproto.jsontag) = "CommitID,omitempty"];

    // UnitType is the type name of the source unit that this ref
    // exists in.
    optional string unit_type = 8 [(gogoproto.nullable) = false, (gogoproto.customname) = "UnitType", (gogoproto.jsontag) = "UnitType,omitempty"];

    // Unit is the name of the source unit that this ref exists in.
    optional string unit = 9 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "Unit,omitempty"];

    // Def is true if this Ref spans the name of the Def it points to.
    optional bool def = 17 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "Def,omitempty"];

    // File is the filename in which this Ref exists.
    optional string file = 10 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "File,omitempty"];

    // Start is the byte offset of this ref's first byte in File.
    optional uint32 start = 11 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "Start"];

    // End is the byte offset of this ref's last byte in File.
    optional uint32 end = 12 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "End"];
};

message RefDefKey {
    optional string def_repo = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefRepo", (gogoproto.jsontag) = "DefRepo,omitempty"];
    optional string def_unit_type = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefUnitType", (gogoproto.jsontag) = "DefUnitType,omitempty"];
    optional string def_unit = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefUnit", (gogoproto.jsontag) = "DefUnit,omitempty"];
    optional string def_path = 5 [(gogoproto.nullable) = false, (gogoproto.customname) = "DefPath", (gogoproto.jsontag) = "DefPath"];
};
